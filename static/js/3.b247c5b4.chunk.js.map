{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["module","exports","checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","connect","state","ings","burgerBuilder","price","totalPrice","loading","order","token","auth","userId","dispatch","onOrderBurger","orderData","actions","withErrorHandler","useState","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipcode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","stateForm","setForm","formIsValid","setFormIsValid","formElementArray","key","push","id","config","form","onSubmit","event","preventDefault","formData","formElementIdentifier","map","formElement","Input","invalid","shouldValidate","valueType","change","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","inputChangedHandler","disabled","inputtype","Spinner","ContactData","axios","withRouter","purchased","history","match","summary","to","purchasedRedirect","goBack","replace","path","component"],"mappings":"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","file":"static/js/3.b247c5b4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__1kL8i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__1xv2y\"};","import React from 'react';\r\nimport classes from './CheckoutSummary.module.css';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\n\r\n\r\n\r\n\r\nconst checkoutSummary = (props) => {\r\n\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>We Hope it tastes well!</h1>\r\n            <div style={{ width: '100%', margin: 'auto' }}>\r\n                <Burger ingredients={props.ingredients} />\r\n            </div>\r\n            <Button\r\n                btnType=\"Danger\"\r\n                clicked={props.checkoutCancelled}>CANCEL</Button>\r\n            <Button\r\n                btnType=\"Success\"\r\n                clicked={props.checkoutContinued}>CONTINUE</Button>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default checkoutSummary;","import React, { useState } from 'react';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport classes from './ContactData.module.css';\r\nimport axios from '../../../axios-orders';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport { connect } from 'react-redux';\r\nimport withErrorHandler from '../../withErrorHander/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../../shared/utility';\r\n\r\nconst ContactData = props => {\r\n\r\n    const [stateForm, setForm] = useState(\r\n        {\r\n            orderForm: {\r\n                name: {\r\n                    elementType: 'input',\r\n                    elementConfig: {\r\n                        type: 'text',\r\n                        placeholder: 'Your Name'\r\n                    },\r\n                    value: '',\r\n                    validation: {\r\n                        required: true\r\n                    },\r\n                    valid: false,\r\n                    touched: false\r\n                },\r\n                street: {\r\n                    elementType: 'input',\r\n                    elementConfig: {\r\n                        type: 'text',\r\n                        placeholder: 'Street'\r\n                    },\r\n                    value: '',\r\n                    validation: {\r\n                        required: true\r\n                    },\r\n                    valid: false,\r\n                    touched: false\r\n                },\r\n                zipcode: {\r\n                    elementType: 'input',\r\n                    elementConfig: {\r\n                        type: 'text',\r\n                        placeholder: 'Zipcode'\r\n                    },\r\n                    value: '',\r\n                    validation: {\r\n                        required: true,\r\n                        minLength: 5,\r\n                        maxLength: 5,\r\n                    },\r\n                    valid: false,\r\n                    touched: false\r\n                },\r\n                country: {\r\n                    elementType: 'input',\r\n                    elementConfig: {\r\n                        type: 'text',\r\n                        placeholder: 'Country'\r\n                    },\r\n                    value: '',\r\n                    validation: {\r\n                        required: true\r\n                    },\r\n                    valid: false,\r\n                    touched: false\r\n                },\r\n                email: {\r\n                    elementType: 'input',\r\n                    elementConfig: {\r\n                        type: 'email',\r\n                        placeholder: 'Email'\r\n                    },\r\n                    value: '',\r\n                    validation: {\r\n                        required: true\r\n                    },\r\n                    valid: false,\r\n                    touched: false\r\n                },\r\n                deliveryMethod: {\r\n                    elementType: 'select',\r\n                    elementConfig: {\r\n                        options: [\r\n                            { value: 'fastest', displayValue: 'Fastets' },\r\n                            { value: 'cheapest', displayValue: 'Cheapest' }\r\n                        ]\r\n                    },\r\n                    value: 'fastest',\r\n                    validation: {},\r\n                    valid: true\r\n                },\r\n\r\n            }\r\n        }\r\n    );\r\n\r\n    const [formIsValid,setFormIsValid] = useState(false);\r\n\r\n\r\n    const orderHandler = (event) => {\r\n\r\n        //prevent the default form behavior when submit (open new page)\r\n        event.preventDefault();\r\n\r\n        // loop throu all the keys and set object with pairs of key:value (name:dima,street:streetname...)\r\n        const formData = {};\r\n\r\n        for (let formElementIdentifier in stateForm.orderForm) {\r\n            formData[formElementIdentifier] = stateForm.orderForm[formElementIdentifier].value\r\n        }\r\n\r\n        // configure post obeject and post to server \r\n        const order = {\r\n            ingredients: props.ings,\r\n            price: props.price,\r\n            orderData: formData,\r\n            userId: props.userId\r\n        }\r\n\r\n        props.onOrderBurger(order, props.token);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    const inputChangedHandler = (event, inputIdentifier) => {\r\n\r\n\r\n\r\n        const updatedFormElement = updateObject(stateForm.orderForm[inputIdentifier], {\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, stateForm.orderForm[inputIdentifier].validation),\r\n            touched: true\r\n        })\r\n\r\n\r\n        const updatedOrderForm = updateObject(stateForm.orderForm, {\r\n            [inputIdentifier]: updatedFormElement\r\n        })\r\n\r\n\r\n\r\n        //set the form valid true ; loop throu keys and check if valid, if one of them is unvalid the fromIsvalid is going to false.\r\n        let formIsValid = true;\r\n        for (let inputIdentifier in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n\r\n        //udpate the state\r\n        // this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\r\n        setForm({ orderForm: updatedOrderForm})\r\n        setFormIsValid(formIsValid)\r\n    }\r\n\r\n\r\n\r\n    const formElementArray = [];\r\n\r\n    for (let key in stateForm.orderForm) {\r\n\r\n        formElementArray.push({\r\n            id: key,\r\n            config: stateForm.orderForm[key]\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n    let form = (\r\n        <form onSubmit={orderHandler}>\r\n            {formElementArray.map(formElement => (\r\n                <Input\r\n                    key={formElement.id}\r\n                    elementType={formElement.config.elementType}\r\n                    elementConfig={formElement.config.elementConfig}\r\n                    value={formElement.config.value}\r\n                    invalid={!formElement.config.valid}\r\n                    touched={formElement.config.touched}\r\n                    shouldValidate={formElement.config.validation}\r\n                    valueType={formElement.id}\r\n                    change={(event) => inputChangedHandler(event, formElement.id)} />))}\r\n            <Button disabled={!formIsValid} inputtype=\"input\" btnType=\"Success\">ORDER</Button>\r\n        </form>);\r\n\r\n    if (props.loading) {\r\n\r\n        form = <Spinner />\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.ContactData}>\r\n            <h4> Enter your Contact Data</h4>\r\n            {form}\r\n        </div>\r\n\r\n\r\n    );\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDisaptchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n    }\r\n};\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDisaptchToProps)(withErrorHandler(ContactData, axios));","import React from 'react';\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport { Route, Redirect, withRouter } from 'react-router-dom';\r\nimport ContactData from './ContactData/ContactData';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Checkout = props => {\r\n\r\n\r\n    const { history, match, ings, purchased } = props;\r\n\r\n    const checkoutCancelledHandler = () => {\r\n        history.goBack();\r\n    }\r\n\r\n    const checkoutContinuedHandler = () => {\r\n        history.replace('/checkout/contact-data')\r\n    }\r\n\r\n\r\n    let summary = <Redirect to=\"/\" />\r\n\r\n    if (ings) {\r\n\r\n        const purchasedRedirect = purchased ? <Redirect to='/' /> : null\r\n\r\n        summary = (\r\n            <div>\r\n                {purchasedRedirect}\r\n                <CheckoutSummary\r\n                    ingredients={ings}\r\n                    checkoutCancelled={checkoutCancelledHandler}\r\n                    checkoutContinued={checkoutContinuedHandler} />\r\n                <Route path={match.path + '/contact-data'}\r\n                    component={ContactData} />\r\n            </div>)\r\n    }\r\n    return summary;\r\n\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n\r\n\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default withRouter(connect(mapStateToProps)(Checkout));"],"sourceRoot":""}