{"version":3,"sources":["components/Order/Order.module.css","components/Order/Order.js","containers/Orders/Orders.js"],"names":["module","exports","order","props","ingredients","ingredientName","push","name","amount","ingredientOutput","map","ig","style","textTransform","display","margin","border","padding","key","className","classes","Order","price","connect","state","loading","orders","token","auth","userId","dispatch","onFetchOrders","actions","withErrorHandler","useEffect","Spinner","id","axios"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,MAAQ,uB,8ECiCXC,EA/BD,SAACC,GAEX,IAAMC,EAAc,GAEpB,IAAK,IAAIC,KAAkBF,EAAMC,YAC7BA,EAAYE,KAAK,CACbC,KAAMF,EACNG,OAAQL,EAAMC,YAAYC,KAIlC,IAAMI,EAAmBL,EAAYM,KAAI,SAAAC,GACrC,OAAO,0BACHC,MAAO,CACHC,cAAe,aACfC,QAAS,eACTC,OAAQ,QACRC,OAAQ,iBACRC,QAAS,OAEbC,IAAKP,EAAGJ,MARL,IASJI,EAAGJ,KATC,KASOI,EAAGH,OATV,QAYX,OACI,yBAAKW,UAAWC,IAAQC,OACpB,2CAAiBZ,EAAjB,KACA,qCAAU,uCAAaN,EAAMmB,OAA7B,O,uCCsBGC,uBAXS,SAAAC,GAEpB,MAAO,CACHC,QAASD,EAAMtB,MAAMuB,QACrBC,OAAQF,EAAMtB,MAAMwB,OACpBC,MAAOH,EAAMI,KAAKD,MAClBE,OAAQL,EAAMI,KAAKC,WAZA,SAACC,GACxB,MAAO,CACHC,cAAe,SAACJ,EAAME,GAAP,OAAkBC,EAASE,IAAoBL,EAAME,QAe7DN,CAA6CU,aA3C7C,SAAA9B,GAAS,IAEb4B,EAAsC5B,EAAtC4B,cAAcJ,EAAwBxB,EAAxBwB,MAAME,EAAkB1B,EAAlB0B,OAAOJ,EAAWtB,EAAXsB,QAElCS,qBAAU,WACNH,EAAcJ,EAAME,KACtB,CAACE,EAAcJ,EAAME,IAGnB,IAAIH,EAAS,kBAACS,EAAA,EAAD,MAQb,OANKV,IACDC,EAASvB,EAAMuB,OAAOhB,KAAI,SAAAR,GACtB,OAAO,kBAACmB,EAAD,CAAOH,IAAKhB,EAAMkC,GAAIhC,YAAaF,EAAME,YAAakB,MAAOpB,EAAMoB,YAK9E,6BACKI,KAwBoEW","file":"static/js/4.9ae3ab1c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__3d0Z5\"};","import React from 'react';\r\nimport classes from './Order.module.css';\r\n\r\nconst order = (props) => {\r\n\r\n    const ingredients = [];\r\n\r\n    for (let ingredientName in props.ingredients) {\r\n        ingredients.push({\r\n            name: ingredientName,\r\n            amount: props.ingredients[ingredientName]\r\n        })\r\n    }\r\n\r\n    const ingredientOutput = ingredients.map(ig => {\r\n        return <span\r\n            style={{\r\n                textTransform: 'capitalize',\r\n                display: 'inline-block',\r\n                margin: '0 8px',\r\n                border: '1px solid #ccc',\r\n                padding: '5px'\r\n            }}\r\n            key={ig.name}\r\n        > {ig.name} ({ig.amount})</span>\r\n    })\r\n\r\n    return (\r\n        <div className={classes.Order}>\r\n            <p>Infredients: {ingredientOutput} </p>\r\n            <p>Price: <strong>USD {props.price}</strong> </p>\r\n        </div>)\r\n};\r\n\r\nexport default order;\r\n\r\n","import React, { useEffect } from 'react';\r\nimport Order from '../../components/Order/Order';\r\nimport axios from '../../axios-orders';\r\nimport withErrorHandler from '../withErrorHander/withErrorHandler';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../store/actions/index';\r\n\r\n\r\nconst Orders = props=> {\r\n\r\n    const {onFetchOrders,token,userId,loading} = props;\r\n\r\n    useEffect(()=>{\r\n        onFetchOrders(token,userId);\r\n    },[onFetchOrders,token,userId])\r\n\r\n\r\n        let orders = <Spinner />;\r\n\r\n        if (!loading) {\r\n            orders = props.orders.map(order => {\r\n                return <Order key={order.id} ingredients={order.ingredients} price={order.price} />\r\n            })\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {orders}\r\n            </div>\r\n\r\n        );\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onFetchOrders: (token,userId) => dispatch(actions.fetchOrders(token,userId))\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n\r\n    return {\r\n        loading: state.order.loading,\r\n        orders: state.order.orders,\r\n        token :state.auth.token,\r\n        userId :state.auth.userId\r\n        \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));"],"sourceRoot":""}